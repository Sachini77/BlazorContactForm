@page "/contact"
@using BlazorContactForm.Models
@using BlazorContactForm.Data
@using BlazorContactForm.Services


@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject IEmailService Emailservice


<div class="form-container">
    <h1 class="text-Primary" style="background-color:aliceblue"> Contact Form </h1>
    <EditForm Model="contactMessage" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-field">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="contactMessage.Name" />
            <ValidationMessage For="@(() => contactMessage.Name)" />
        </div>

        <div class="form-field">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="contactMessage.Email" />
            <ValidationMessage For="@(() => contactMessage.Email)" />
        </div>

        <div class="form-field">
            <label for="subject">Subject</label>
            <InputText id="subject" @bind-Value="contactMessage.Subject" />
            <ValidationMessage For="@(() => contactMessage.Subject)" />
        </div>

        <div class="form-field">
            <label for="message">Message</label>
            <InputTextArea id="message" @bind-Value="contactMessage.Message" />
            <ValidationMessage For="@(() => contactMessage.Message)" />
        </div>

        <button type="submit" class="btn btn-success">Submit</button>
    </EditForm>



    @if (isSubmitted)
    {
        <div class="alert alert-success mt-3">
            Your message has been sent successfully!
        </div>
    }
</div>

@code {
    private ContactMessage contactMessage = new();
    private bool isSubmitted = false;

    private async Task HandleValidSubmit()
    {
        try
        {
            
            contactMessage.SubmittedOn = DateTime.Now;

            
            DbContext.ContactMessages.Add(contactMessage);
            await DbContext.SaveChangesAsync();

           
            await Emailservice.SendEmailAsync(
     "spriyangani@invorg.com",
     $"New Contact Form Submission: {contactMessage.Subject}",
         $@"<h1>New Message</h1>
        <p><b>Name:</b> {contactMessage.Name}</p>
        <p><b>Email:</b> {contactMessage.Email}</p>
        <p><b>Subject:</b> {contactMessage.Subject}</p>
        <p><b>Message:</b> {contactMessage.Message}</p>");



            
            isSubmitted = true;

           
            StateHasChanged();

           
            await Task.Delay(4000);
            isSubmitted = false;

           
            StateHasChanged();

            
            contactMessage = new ContactMessage();
        }
        catch (Exception ex)
        {
           
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
}
